// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package multipath is a generated GoMock package.
package multipath

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMultipath is a mock of Multipath interface
type MockMultipath struct {
	ctrl     *gomock.Controller
	recorder *MockMultipathMockRecorder
}

// MockMultipathMockRecorder is the mock recorder for MockMultipath
type MockMultipathMockRecorder struct {
	mock *MockMultipath
}

// NewMockMultipath creates a new mock instance
func NewMockMultipath(ctrl *gomock.Controller) *MockMultipath {
	mock := &MockMultipath{ctrl: ctrl}
	mock.recorder = &MockMultipathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMultipath) EXPECT() *MockMultipathMockRecorder {
	return m.recorder
}

// AddWWID mocks base method
func (m *MockMultipath) AddWWID(ctx context.Context, wwid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWWID", ctx, wwid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWWID indicates an expected call of AddWWID
func (mr *MockMultipathMockRecorder) AddWWID(ctx, wwid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWWID", reflect.TypeOf((*MockMultipath)(nil).AddWWID), ctx, wwid)
}

// AddPath mocks base method
func (m *MockMultipath) AddPath(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPath", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPath indicates an expected call of AddPath
func (mr *MockMultipathMockRecorder) AddPath(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPath", reflect.TypeOf((*MockMultipath)(nil).AddPath), ctx, path)
}

// DelPath mocks base method
func (m *MockMultipath) DelPath(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelPath", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelPath indicates an expected call of DelPath
func (mr *MockMultipathMockRecorder) DelPath(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelPath", reflect.TypeOf((*MockMultipath)(nil).DelPath), ctx, path)
}

// FlushDevice mocks base method
func (m *MockMultipath) FlushDevice(ctx context.Context, deviceMapName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDevice", ctx, deviceMapName)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushDevice indicates an expected call of FlushDevice
func (mr *MockMultipathMockRecorder) FlushDevice(ctx, deviceMapName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDevice", reflect.TypeOf((*MockMultipath)(nil).FlushDevice), ctx, deviceMapName)
}

// IsDaemonRunning mocks base method
func (m *MockMultipath) IsDaemonRunning(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDaemonRunning", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDaemonRunning indicates an expected call of IsDaemonRunning
func (mr *MockMultipathMockRecorder) IsDaemonRunning(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDaemonRunning", reflect.TypeOf((*MockMultipath)(nil).IsDaemonRunning), ctx)
}

// GetDMWWID mocks base method
func (m *MockMultipath) GetDMWWID(ctx context.Context, deviceMapName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDMWWID", ctx, deviceMapName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDMWWID indicates an expected call of GetDMWWID
func (mr *MockMultipathMockRecorder) GetDMWWID(ctx, deviceMapName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDMWWID", reflect.TypeOf((*MockMultipath)(nil).GetDMWWID), ctx, deviceMapName)
}
